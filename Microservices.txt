-Microservices: advantage: complexity is not in application, between services
-When microservices are in use functionalities are buried into services, all the other problems are common to all application
-When problems are common ==> there are common patterns ==> frameworks ==> technology trends
-Difference between microservices vs webservices: 
	O webservices are created as utility services. Create a service and publish it. While doing that creator doesn't know in which places
	it will be used (IP Location finder)
	
	O on the otherhand, microservices are created for a known purpose. This service will serve this part of the application. Will be only used
	by this application & that's okay. Still it can be reused. But it's not a requirement. It's not designed for that.
-Services in Service Oriented architectures deal with data, no UI. in microservices UI is also
a microservice
-mymoviecatalog.com/api/koushik
{
	id: Koushik
	name: Koushik K3
	movies: [
		{id:1234, name:"J", desc:"...", rating:3},
		{id:500, name:"J2", desc:"...", rating:5},
	]
}
-
MovieInfoService -> ()																	RatingsDataService -> ()
	Input: MovieID																			Input: UserID
	Output: Movie details																	Output: MovieID and ratings
		|																						|
		|																						|
		|																						|
		|																						|
		-------------------------------> MovieCatalogService -> () <-----------------------------
											Input: UserID
											Output: Movie list with details
													|
													|
													|
													|
													V
													
==> Create 3 springboot projects
-Build MovieCatalogService API
-Build MovieInfoService API
-Build RatingsDataService API
-Have MovieCatalogService call the other two services (the naive way)
-Implement a better way (Service discovery)
		                                
-Is it possible to have the end client directly call the individual microservices and collate the data on the client side? Yes. But having
multiple clients, need to do the same thing again and again.
-How to create springboot application?
		-Using Maven and adding required dependencies
		-Using Spring CLI
		-Using start.spring.io
-Once all three APIs are done with hardcoded values, need to make MovieCatalogService to call other services. How?
programmatically, using a REST client library, SpringBoot comes with a client in classpath - RestTemplate (Deprecated) or WebClient (needs reactive programming and reactive programming dependencies)
-In Java, to unmarshall streams to Object, the class should have an empty constructor
-This call is synchronous. wait until the rest template gives the output
Movie movie = restTemplate.getForObject("http://localhost:8080/movies/" + rating.getMovieId(), Movie.class);
-In asynchronous pgm, no need to wait for output. Instead provide a lamda so that once the result is available it can execute the lamda
<!-- This is needed for WebClient, asynchronous reactive programming-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-webflux</artifactId>
		</dependency>
-since http method is get, after builder.build() get
 bodyToMono - Mono means this will be returned at some point. not immediately
 but here no way. need to wait until result come. then block()
      Movie movie = builder.build().get().uri("http://localhost:8080/movies/" + rating.getMovieId()).retrieve()
        .bodyToMono(Movie.class).block();
-Problem with API having list as root node/top level node (return type) : 
if need to add extra field problem
Eg: list of ratings for a user is returned. If need to send username for those ratings, fail. If it's an object, adding new field doesn't
affect
In REST client side, need to give return type. List is generics. need to use ParameterizedType. ugly.
Solution: top level node is object and list is one of the fields. Adding new field gives backward compatibility.
-RestTemplate is threadsafe. one will not affect another.
-Security in microservice communication:
	-HTTPS
	-Authenticated RestTemplate calls (Authentication information will be sent through headers)
-Why hardcoding URLs are bad?
	-Changes require code updates
	-Cloud deployment gives dynamic URLs ==> need to support that.
	-Load balancing (some microservices need more bots ==> more URLs ==> which one to hardcode?)
	-Multiple environments (Development, QA, Production ==> need to change everytimes)
-To overcome hardcoding URLs' problem ==> Service discovery
-Client side service discovery: clients ask "give me the URL of service 2", discovery service gives URL, using URL client communicate
	Disadvantage: too much hops
-Server side service discovery: client ask "pass this message to service 2", not like discovery though
	Advantage: less hops
-Spring cloud uses client side service discovery
-Spring cache service URL for particular amount of duration

----------------------------------------------------------------------------------------------------------------------------------------------
Service discovery for RestTemplate:
-Eureka (open source): commonly used service discovery technology in Spring cloud (Netflix created that)
-Other libraries by Netflix (Eureka, Ribbon, Hysterix, Zuul)
-Spring provides great abstraction with layers
-To discover, 
	-need to start Eureka server
	-each services register and act as Eureka client (Tell about its availability by registering (publish), It can ask Eureka server for another 
	service (locate))
-create Eureka server is creating another SpringBoot application
-Eureka server dependency : for Eureka server
-Eureka discovery dependency : for Eureka client
-@EnableEurekaServer // This annotation is required in addition to @SpringBootApplication to enable server discovery
public class DiscoveryServerApplication{}
-If Java version is > 9, errors are shown. Because Jaxb is deprecated from Java 9. Need to explicitly add Jaxb dependencies
            <dependency>
                <groupId>javax.xml.bind</groupId>
                <artifactId>jaxb-api</artifactId>
                <version>2.3.0</version>
            </dependency>
            <dependency>
                <groupId>com.sun.xml.bind</groupId>
                <artifactId>jaxb-impl</artifactId>
                <version>2.3.0</version>
            </dependency>
            <dependency>
                <groupId>org.glassfish.jaxb</groupId>
                <artifactId>jaxb-runtime</artifactId>
                <version>2.3.0</version>
            </dependency>
            <dependency>
                <groupId>javax.activation</groupId>
                <artifactId>activation</artifactId>
                <version>1.1.1</version>
            </dependency>
-starting with "Started Eureka Server"
-http://localhost:8761/
Instances currently registered with Eureka: empty. because no microservices are registered. because they don't have Eureka client
-server.port=8761 is default for Eureka server
-Following properties are needed to be added to application.properties avoid Eureka registered to itself. There is only one Eureka server.
No need to look for other Eureka servers
		eureka.client.register-with-eureka=false
		eureka.client.fetch-registry=false
-Why Eureka servers are trying to register to itself?
Eureka servers are Eureka clients as well. By being so they can be registered among themselves when there are multiple Eureka servers.
-Why multiple Eureka server? If one server fails, other servers will be available
-If not those properties added, there will be errors. still it works
-Make microservices as Eureka clients: (while creating, can add Eureka discovery client also in addition to web dependency)
	-Add dependency
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
	
	-Add properties
			<properties>
				<spring-cloud.version>2021.0.3</spring-cloud.version>
			</properties>
			
	-Add @EnableEurekaClient annotation // not mandatory in new versions
	-Add spring.application.name
-If using Eureka server in different server or port, need to specify that in application.properties
-Consuming microservice : Ask library with service name. That library will call service discovery, get the URL and use it. usage is just like client 
side service discovery. But underneath library behaves as server side service discovery. Therefore reduced hops compare to typical client side 
service discovery.
with @LoadBalanced annotation in RestTemplate bean
-@LoadBalanced annotation does service discovery in load balanced way. It tells RestTemplate not to go to the URL directly. Go to service discovery
first & use that
-Eureka only knows names of the microservices it's registered with
-UserRating rating =
      builder.build().get().uri("http://localhost:8082/ratings/users/" + userId).retrieve().bodyToMono(UserRating.class)
        .block();
should be replaced with
UserRating rating =
      builder.build().get().uri("http://ratings-data-service/ratings/users/" + userId).retrieve().bodyToMono(UserRating.class)
        .block();
(localhost:8082 ==> ratings-data-service)
-If no service or service name wrong: No instance available error
-application name changed: need to rebuild
-service name, payload should not be changed once deployed to avoid rebuild
-Can all services be fetched at once runtime? yes
-Once eureka-client gets the information once, it will not call again and again. It has caches
-When the following command get executed, it executes the main method in the jar with default application properties
java -jar movie-info-service.jar
-It allows to change the properties runtime:
D:\Tharsini\MicroserviceTest\movie-info-service\target
java -Dserver.port=8201 -jar movie-info-service.jar
Another service with different port: in Eureka service registered
Load balancing is happening in client side. Not effective
100 instances. don't have communication between themselves
-Want to have advanced load balancing?
Autowired DiscoveryClient and getInstances() and loop through
-Fault tolerance:
Eureka client sends heartbeats to service discovery to say "I am still alive"
If discovery service could not get it for a while then assume it's dead
-When discovery service goes down, client picks from cache
----------------------------------------------------------------------------------------------------------------------------------------------
-fault tolerance: In an application if there is a fault, how much tolerance does the system have
-Resilience: how many errors system tolerate before going down.
Whether it has a mechanism to fix the problem and come alive
-movie-info-service can be external service
-more external service ==> more failures
-https://www.themoviedb.org/ provides API
-Create account there. When account is created API key can be requested. That API key
will be used to consume it
-Configured value from application.properties file can be read to application with @Value annotation and property key name
 @Value("${api.key}")
 private String apiKey;
-Resilience ways:
--One service goes down: run multiple instances
--A microservice instance is slow: If external service is slow dependent services are also slow. But unrelated service can also become slow. Why? Threads
When a request comes to a webserver, it creates a thread and executing the request. Once the response is given, thread goes away. Another request => another thread
When a thread is in-progress, another request comes in, another thread is created.
If request comes faster than the actual handling of a request, more and more threads will be in progress at the same time.
==> resources are consumed. maximum number of threads are not configured, system crashes.
initial solution: using Timeout
Temporary solution: Increase size of tomcat thread pool
-When something slow user refreshes ==> more request at once ==> tend to fail quickly
-Setting timeout (Any service which calls another service can set timeout): In our case, movie-info-service, movie-catalog-service
1. set timeout using RestTemplate : requests which use this RestTemplate will use that timeout
HttpComponentsClientHttpRequestFactory httpComponentsClientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory();
    httpComponentsClientHttpRequestFactory.setConnectTimeout(3000);// in milliseconds
    return new RestTemplate(httpComponentsClientHttpRequestFactory);
Problem: even though timeout, thread still exists in the webserver. How?
request rate: 1 request/second, but timeout: 3 second, even though thread is cleared eventually after timeout, it will stay until the timeout. for other case it solves the problem
Solution:
-movie-catalog-service can be smart and rather sending request movie-info-service while it's slow, act smarter:
see who is slow, hold request for a while without sending
==> circuit breaker pattern (drip switch when a fault, after sorted manual or auto on)
Technically it can't be applied to a service which calls only one service. There should be a service which calls at least two services. In that case, when one service is being
slow affects other service which could have been faster. In our case it's movie-catalog-service
-When a service gives one timeout doesn't mean it should not send requests anymore. At which point it should decide the service it's requested for is not good enough
At any point of time, last three requests timeout going to break this circuit. Then it will not be able to catch one success, then failure, one success, then failure.
That means the way to make it fail should be good enough to accomodate many cases.
-Circuit breaker parameters:
	1. When does the circuit drip?
		Last n requests to consider for the decision
		How many of those should fail?
		Timeout duration (when a request goes beyond this time, it will be marked as failure)
	2. When does the circuit becomes back to normal?
		How long after a circuit drip to try again? (sleep window)
-To decide these parameters, request rate and threads webserver can handle are needed
-When it detects a problem, it needs to stop sending request & it needs a fallback mechanism
-Fallback options:
	1. throw an error - not good
	2. return a fallback "default" response - better than first
	3. save previous responses (cache) and use that when possible - best
-Why circuit breakers?
	1. failing fast
	2. fallback functionality
	3. automatic recovery
-To do all these things, we need through knowledge in concurrency. But there is framework to 
do this : Hysterix
-How to identify the available thread pool size? In webserver configuration file
-Determine parameters: try and try or literature review or performance test
-throwing error: need to handle => headache
-caching response will not be used for machine critical application - banking application
-Hysterix : by Netflix
	1. Implements circuit breaker pattern
	2. Give the configuration parameters
	3. Work well with spring boot
-Since parameters changes, need an adaptive system. still Hysterix is good
-Adding Hysterix support:
	-Add the Maven spring-cloud-starter-netflix-hystrix dependency
	-Add @EnableCircuitBreaker annotation to the application class
	-Add @HysterixCommand annotation to methods that need circuit breaker
	-Configure Hysterix behavior (parameters)
-When no parameters provides Hysterix executes fallback or when one consuming service down it does the same
-How does it work?
just like anything works in Spring (Proxy)
Hysterix wraps your class in a proxy class. proxy class contains circuit breaker logic.
-In our case, ratings might return correct data. but we return whole fallback rather considering that partial result. What if we want to have separate fallback?
==> more granularity in fallback mechanism
-With separate @HysterixCommand fallback which sits inside the class itself, not get executed due to proxy class. It's a wrapper for the instance of an API class.
No way to tell to call fallback. If external class calls it will do
Solution: put method which uses fallback and the fallback in a class
-Hysterix allows data to display regarding resiliency in Dashboard. Can be configured as external application in Production or within application for education purpose.
-To achieve that, add dependencies
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>
			<version>2.2.10.RELEASE</version>
		</dependency>
		        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
	add annotation @EnableHystrixDashboard : If external app to use dashboard, need to listen microservices which have circuit breakers
	add management.endpoints.web.exposure.include=hystrix.stream and hystrix.dashboard.proxyStreamAllowList=* to application.properties
	@HystrixCommand annotation should be added to controller method
-spring-boot-starter-actuator : to know how microservices are running
-Now http://localhost:8081/hystrix is showing Hysterix dashboard
-Enter http://localhost:8081/actuator/hystrix.stream in url and monitor with request
-Handling outages: Bulkhead pattern
fault tolerance: create more instances, intelligent circuit breakers, Bulkhead pattern
Bulkhead pattern: regarding ship building: when things goes wrong, critical for lives
If holes => it will sink. To avoid cascading failures, in ships Bulkheads. Cabins in the ships close
to the stern of the ship ==> They are at the bottom ==> Susceptible to a hole
Those keyrooms should be watertight even if water entered it will not affect other places
-One service may make another service down
-Idea is having separate thread pools for separate services
-Specify threadpool names inside @HysterixCommand
-Thread pool size, Queue size (when not consumed, upto which number they can be queued)
	@HystrixCommand(fallbackMethod = "getFallbackUserRating",
			threadPoolKey = "userRatingPool",
			threadPoolProperties = {
					@HystrixProperty(name = "coreSize", value = "20"),
					@HystrixProperty(name = "maxQueueSize", value = "10")
			}
    public UserRating getUserRating(String userId) {
        UserRating userRating = restTemplate.getForObject("http://ratings-data-service/ratings/users/" + userId, UserRating.class);
        return userRating;
    }
-Creating separate threadPoolKey: create separate bulkhead
-using threadPoolKey : can be shared among multiple methods or can avoid sharing by the service we don't want to
-coreSize : how many concurrent thread allowed for that bulkhead. I don't want to have more than 20 threads waiting for this API. But they can be queued
-maxQueueSize: how many requests can be queued before they get access to the threadpool
-If it beyonds then fallback method will be invoked

----------------------------------------------------------------------------------------------------------------------------------------------------------
Why do we care about microservice configuration?
-Configuration is essential for any application
-Should be separated from code
-Eg: Database connection information
Don't hardcode ==> can change those values without changing the code and no need to redeploy
-Example configurations:
	1. DB connections
	2. Credentials: file share/S3 bucket
	3. Feature flags - Turn on a feature for a subset of users or Turn on a feature for a particular time period
	4. Business logic configuration parameters (discount)
	5. Scenario testing - refactored code allowed to 10% and increased step by step
	6. SpringBoot application
-Earlier configurations are done though XML file. Now properties files, YAML files, JSON files since they are less verbose
-Why separating configurations are important in case of Microservices? multiple microservices and multiple copies
-Configurations should be externalized, environment specific, consistent (all copies should have same values) version history, real-time management (changing configuration
values while microservices are running)
- application.properties: key-value pair
it's not externalized. property file is inside the jar
-generate jar: by maven install
-create application.properties in the jar location
-copy properties in application.properties
-now application will take properties from the external file
-java -jar .\spring-boot-config-0.0.1-SNAPSHOT.jar --my.greeting="Miyaav" : this will override external properties file
-System property also can be accessed by @Value annotation
-    @Value("some static message")
    private String staticMessage;
-When property key is not available, it won't start application (Injection of autowired dependency failed)
-    @Value("${my.val:JJDefault}")
    private String defaultValue;
When property key is not available, it will pick the default value
-Comma separated values will be considered as list
-
@Value("${my.list}")
private List<String> numbers;
-dbValues={connectionString: 'http://____', userName: 'foo', password: 'pass'}
    @Value("#{${dbValues}}")
    private Map<String, String> dbValues;
regular expression: # treats the value in {} as Spring Expression language evaluation (SpEL)
can call other properties of beans using this
-@ConfigurationProperties : to pull up properties from properties file and use it as group
-Rather annotating each values one by one, can create a bean an pull all values at once
-@ConfigurationProperties("db")
pick key starts with db. and match field with remaining part of the key
db.host=127.0.0.1
private String host;
-db.dummyPort=Foo
private int dummyPort;
error in startup: good
-When single message, single list: good to use @Value annotation
-when group of configuration or to be used in multiple places : @ConfigurationProperties
-actuator shows all the user specified or spring provided configuration
-actuator exposes sensitive information. need to tell it's okay to do that: by adding management.endpoints.web.exposure.include=* in application.properties
In production : no
-http://localhost:8080/actuator/configprops gives all the configuration properties
-can override any configuration values from that in application.properties
-when more prefix and properties ==> more verbose in application.properties ==> yaml file configuration came
-YAML => YAML ain't Markup Language
-properties file to yaml file: replace "=" with ": "
non-keywords can be differentiated as number or text
others should be explicitly marked with double quoted to consider them as string
true benefit of YAML is its nesting structure
-Different configuration for different environments: by Spring profiles
-Having different properties files for different environments is valid. But,
	-outside source code control
	-manual management across environments
-Spring profiles solve this
-profile name naming convention: application-<profileName>.extn
application-test.yml => new profile "test" created
Add spring.profiles.active: test to default profile file to activate the new profile
-default profile is always active. even though it's being asked to check another profile, default profile is still active
-in default profile : test - active, in test profile - production is active => now production profile overwrites if same key value is in production. otherwise, it will be combination
of profiles ==> no need to copy every properties. majority of properties in default profile. Changing properties in relavant profiles
-In cmd, can change active profile while it's running: java -jar .\spring-boot-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=default
==> environment based configurations are sitting into the jar. need to choose needed at runtime
-Selecting bean by profile:
-
@Repository
@Profile("production")
public class DataSourceBean{
}

@Repository
@Profile("dev")
public class LocalDataSourceBean{
}
: DataSourceBean only in production, LocalDataSourceBean only in dev
can use @Profile annotation
-If we don't set @Profile, "default" profile will be used
-@Value annotation : injecting values. not looking up. To lookup values, using environment object
-Environment is an object having active values of environment (profiles & properties)
-Using this profiles should not be looked up: it affects testability
If environment is this do this, If environment is that do that. No way to test that
-Using this properties also should not be checked
Because @Value should be used. Value should be injected. not looked up
easy to test & initial make sure before deployment
-We need to configure multiple microservices ==> complexity increases
-To achieve consistency, need spring config server.
because I have a jar with properties deployed in 2 microservices.
Someone modified some properties.
My 2 microservices jars are outdated now ==> no consistency
=> separate configuration service to maintain consistency ==> config as separate microservice
**************
solutions:
-Apache Zookeeper - centralized configuration server, provides distributed Synchronization,
			-provides naming services
-ETCD - distributed key-value store
-Hashicorp Consul
-Spring Cloud Configuration Server
***************
Where to put config?
-Db
-Sourcecode - need to re-deploy: no need to rebuild for configuration
-Spring Cloud Configuration Server: central server every microservices talk to.
It connects to different datasource. One is popular. 
popular version control store: Git repo
Not from db, from Git repo online.
Modify configuration & push to git repo.
Spring cloud configuration server pulls changes & apply new configuration
-new SpringBoot application with Config server dependency: for Spring cloud configuration server
-add @EnableConfigServer annotation to main application
-In application.properties file add property: spring.cloud.config.server.git.uri
Example for local repo URI:
spring.cloud.config.server.git.uri=D:\Tharsini\MicroserviceTest\config-repo

value can be local repo or online repo
-create a local config repo:
create a folder: config-repo
add application.yml
add properties
git init
git add .
git commit -m "Adding config yml file"
Now it's committed to local repo.
can be referred this local repo by URI.
8888: commonly used port for spring cloud configuration by convention
-spring cloud configuration url : http://localhost:8888/<file-name>/<profile> : file-name without extension
-http://localhost:8888/application/default will give configurations read from git repo
